Notes for future design

--

Use an event-based model for group tasking manager and other coordinated logic.

Rather than subscribing for events, grab MethodInfo of methods named like the events.
Cache delegates from MethodInfo as described <http://stackoverflow.com/questions/940675/getting-a-delegate-from-methodinfo>

The delegates will then be casted to their actual argument list at event invocation time.
See how generic types are used with delegates to avoid any boxing/casting <https://msdn.microsoft.com/en-us/library/sx2bwtw7.aspx>

--

Each block (class declared in tiles.fs) will belong to one biome. To save space, individual
graphics from biome's tileset won't be saved. See how the Block class is sparse.

Instead, store a random seed in each cell and choose the graphics when the tile is displayed.
Note dotnet random class doesn't allow for reinitializing the seed. To avoid heap-allocating
random class instances, implement a simple PRNG with direct seed access.
See for a simple and good enough algorithm <https://en.wikipedia.org/wiki/Xorshift>, note different variants.

Whole block images should be cached on a LRU basis from rendertarget.

--

Biomes won't look natural if they end directly on block boundary so add a random skew on each
row or column the biome change occurs. The tileset edges are all described in the art/tile .mes file.
Each transition has the same structure wrt which side connects to what. Don't forget about the ability to
flip tiles horizontally or vertically.

--

Biomes need to be chosen on a per-block basis, definitely composed of more than a single block.

Note Dwarf Fortress' biome scheme <http://gamedev.stackexchange.com/questions/31241/random-map-generation?lq=1>

Also note temperature dependent on longitude from an actual scientific model <https://en.wikipedia.org/wiki/K%C3%B6ppen_climate_classification>
Rainfall patterns are more of an "ordered noise" thing.

See how biome descriptions relate to Arcanum tilesets.

--

Consult @amitp's guide on noise types and his methods <http://www.redblobgames.com/articles/noise/introduction.html> as
an alternative to perlin, where applicable.

--

Avoid unit pathfinding with no player in sight. Generate n^2 paths between objects of interest and lerp NPC positions from them.
For actual pathfinding use JPS <https://github.com/juhgiyo/EpPathFinding.cs> or A*.

In case of blockage by another unit while pathfinding, note the time amount the blocking unit stood still, and don't attempt to
go around if that time is small. Maybe initialize own standing-still time to the same value as the blocking unit's.
When multiple units form a chokepoint, this should allow them to wait rather than take paths around buildings, etc.

Allow passing through units standing in a doorway etc. for a long time, as long as the end position isn't occupied by another unit.
In case it suddenly becomes, unit must move randomly somewhere else though.

--

Perlin worms seem to work great for natural caves.
Convolve with cellular automaton to make larger rooms, e.g. sum the amount of empty space in a nxn grid and create
more empty space upon passing some threshold.
See <http://www.roguebasin.com/index.php?title=Cellular_Automata_Method_for_Generating_Random_Cave-Like_Levels>

BSP generates great layouts we can use it for some purpose. <http://www.roguebasin.com/index.php?title=Basic_BSP_Dungeon_generation>

--

Consider .NET Task system for larger computations, but watch task granularity and locking demands.

Also delimited continuations (see F# compexpr) may be better than state machines in some cases. But that heap-allocates over time.

--

Use additive blending for lights. We don't per se need shaders for ground tiles and possibly many other elements.

For lights, use the percent falloff declaration rather than polynomials. See <https://developer.valvesoftware.com/wiki/Constant-Linear-Quadratic_Falloff>

Lights can't pass through walls so use Bresenham for collision detection and only then blend.

--

Store blocks in worldspace as jagged arrays. Multidimensional array memory
layout in .NET requires computing the index, e.g. `y * width + x` typical for bitmaps.

--

Meanshift is probably good for animal herding behavior simulation.

It's possibly also good for finding crossroads of trade routes.
@amitp posted this idea at <http://theory.stanford.edu/~amitp/GameProgramming/Applications.html>

--

Embed F# Interactive for debugging over a loopback socket or similar. Make it threadsafe with regard to main loop.

--

Think about modelling NPC personality on a (-1)->1 scale. Think of the right variables here that affect gameplay.
Similarly model skills on a 0->1 scale.

--

Consider serialization choices, either .NET binary serializer or homebrew stuff with reflection.
Due to object id's we don't have cycles by design so builtin stuff should work without much problem.

--

John Carmack's scheme of making player actions encapsulated as if happened over a network even on a
non-networked instance can bring multiplayer with low cost. Also his ideas of using delta compression et al.
are great. See <http://fabiensanglard.net/> for reviews of johnc's code.

It'd be necessary to implement UDP channels with different semantics - lossy/lossless/last etc.

--

Since Arcanum tilesets have only three elevation types (ground, impassable mountain, water), consider applicable
methods for terrain generation.

Mountains can possibly be made with random walk, using a variation of this idea <http://programmersbraindump.blogspot.mx/2012/07/random-walk-map-generation.html>
Prevent anomalies as they can arise from any non-deterministic methods. Mountains too large, occupying only
a single tile etc.

Have rivers get emitted from mountains, using perlin worms biased by a hidden elevation value etc.
Hidden elevation value is needed for lakes, etc.

--

Arcanum has no children models at all. Need to resize models changing aspect ratio.
See <http://design.tutsplus.com/articles/human-anatomy-fundamentals-advanced-body-proportions--vector-19869>
